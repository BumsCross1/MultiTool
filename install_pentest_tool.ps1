# PenTest MultiTool Windows Installer
# Führe dieses Script als Administrator aus

# Farbdefinitionen
$ErrorActionPreference = "Stop"

# Funktion für farbige Ausgabe
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Success { Write-ColorOutput Green "[+] $args" }
function Write-Status { Write-ColorOutput Blue "[*] $args" }
function Write-Warning { Write-ColorOutput Yellow "[!] $args" }
function Write-Error { Write-ColorOutput Red "[-] $args" }

# Admin-Check
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "Dieses Script muss als Administrator ausgeführt werden!"
    Write-Warning "Bitte starte PowerShell als Administrator und führe das Script erneut aus."
    exit 1
}

Write-Status "Starte Installation der Abhängigkeiten für das PenTest MultiTool"

# Chocolatey Package Manager installieren (falls nicht vorhanden)
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Status "Installiere Chocolatey Package Manager..."
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    Write-Success "Chocolatey installiert"
}

# Systemweite Tools installieren
Write-Status "Installiere systemweite Tools..."

# Python 3
choco install python3 -y --force
Write-Success "Python 3 installiert"

# Nmap
choco install nmap -y
Write-Success "Nmap installiert"

# Wireshark (nur CLI Tools)
choco install wireshark --package-parameters="/InstallCLI" -y
Write-Success "Wireshark CLI Tools installiert"

# Git
choco install git -y
Write-Success "Git installiert"

# SQLMap
choco install sqlmap -y
Write-Success "SQLMap installiert"

# Nikto
choco install nikto -y
Write-Success "Nikto installiert"

# Installiere Python-Bibliotheken
Write-Status "Installiere Python-Bibliotheken..."

# pip upgraden
python -m pip install --upgrade pip
Write-Success "pip aktualisiert"

# Installiere alle benötigten Bibliotheken
$packages = @(
    "keyboard",
    "requests",
    "beautifulsoup4",
    "python-nmap",
    "scapy",
    "cryptography",
    "dnspython",
    "lxml",
    "colorama",
    "psutil",
    "netifaces",
    "pyinstaller"
)

foreach ($package in $packages) {
    Write-Status "Installiere $package..."
    pip install $package
    Write-Success "$package installiert"
}

# Erstelle Verzeichnisstruktur
Write-Status "Erstelle Verzeichnisstruktur..."
$pentestDir = "$env:USERPROFILE\Pentest-Tools"
$directories = @("wordlists", "scripts", "reports", "logs")

foreach ($dir in $directories) {
    $fullPath = Join-Path $pentestDir $dir
    if (-not (Test-Path $fullPath)) {
        New-Item -ItemType Directory -Path $fullPath -Force | Out-Null
        Write-Success "Verzeichnis erstellt: $fullPath"
    }
}

# Downloadiere Wordlists
Write-Status "Downloadiere Wordlists..."

# RockYou Wordlist
$rockyouPath = Join-Path $pentestDir "wordlists\rockyou.txt"
if (-not (Test-Path $rockyouPath)) {
    Write-Status "Downloadiere RockYou Wordlist..."
    Invoke-WebRequest -Uri "https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt" -OutFile $rockyouPath
    Write-Success "RockYou Wordlist heruntergeladen"
}

# SecLists
$seclistsPath = Join-Path $pentestDir "wordlists\SecLists"
if (-not (Test-Path $seclistsPath)) {
    Write-Status "Downloadiere SecLists..."
    git clone https://github.com/danielmiessler/SecLists.git $seclistsPath
    Write-Success "SecLists heruntergeladen"
}

# Erstelle das Hauptscript
Write-Status "Erstelle PenTest MultiTool Script..."
$scriptPath = Join-Path $pentestDir "scripts\pentest_multitool.py"

# Hier würde dein vollständiger Python-Code eingefügt werden
# Für jetzt erstellen wir ein Platzhalter-Script
@"
#!/usr/bin/env python3
# PenTest MultiTool Ultimate Edition
# Autogenerated by installer script

print("PenTest MultiTool - Bitte füge den vollständigen Code hier ein")
print("Das Tool wurde installiert in: $scriptPath")
"@ | Out-File -FilePath $scriptPath -Encoding UTF8

Write-Success "Script erstellt: $scriptPath"

# Erstelle Desktop-Verknüpfung
Write-Status "Erstelle Desktop-Verknüpfung..."
$shortcutPath = "$env:USERPROFILE\Desktop\PenTest MultiTool.lnk"
$wshell = New-Object -ComObject WScript.Shell
$shortcut = $wshell.CreateShortcut($shortcutPath)
$shortcut.TargetPath = "python"
$shortcut.Arguments = "`"$scriptPath`""
$shortcut.WorkingDirectory = "$pentestDir\scripts"
$shortcut.Description = "PenTest MultiTool Ultimate Edition"
$shortcut.Save()

Write-Success "Desktop-Verknüpfung erstellt"

# Setze Umgebungsvariablen
Write-Status "Setze Umgebungsvariablen..."
[Environment]::SetEnvironmentVariable("PENTEST_HOME", $pentestDir, "User")
# Füge Script-Verzeichnis zum PATH hinzu
$currentPath = [Environment]::GetEnvironmentVariable("PATH", "User")
$scriptsPath = Join-Path $pentestDir "scripts"
if ($currentPath -notlike "*$scriptsPath*") {
    [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$scriptsPath", "User")
}

Write-Success "Umgebungsvariablen gesetzt"

# Finale Zusammenfassung
Write-Success "Installation abgeschlossen!"
Write-Status "Zusammenfassung der installierten Tools:"
Write-Host "  • Python 3 und alle benötigten Bibliotheken" -ForegroundColor Green
Write-Host "  • Nmap - Netzwerk-Scanner" -ForegroundColor Green
Write-Host "  • SQLMap - SQL Injection Tool" -ForegroundColor Green
Write-Host "  • Nikto - Web Vulnerability Scanner" -ForegroundColor Green
Write-Host "  • Wordlists (RockYou, SecLists)" -ForegroundColor Green
Write-Host ""
Write-Status "Das PenTest MultiTool findest du in: $scriptPath"
Write-Status "Eine Desktop-Verknüpfung wurde erstellt."
Write-Warning "Vergiss nicht, dein eigenes PenTest MultiTool Script in $scriptPath zu kopieren!"
Write-Host ""
Write-Warning "Starte PowerShell neu oder führe 'refreshenv' aus, um die Umgebungsvariablen zu aktualisieren."

# Kurze Pause am Ende
Start-Sleep -Seconds 3